//since windows' intellij seems to have issues with sources
import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'application'
apply plugin: 'java'

def MAIN_TITLE = 'LibraryProject'
def MAIN_VERSION = '1.0'
mainClassName = 'com.cesi.library_project.Main'

sourceSets {
    main {
        java { srcDir "src" }
        resources { srcDir "resources" }
    }
    windows {
        java { srcDir "src" }
        resources { srcDir "resources" }
        compileClasspath += sourceSets.main.runtimeClasspath
    }
    linux {
        java { srcDir "src" }
        resources { srcDir "resources" }
        compileClasspath += sourceSets.main.runtimeClasspath
    }
    linux64 {
        java { srcDir "src" }
        resources { srcDir "resources" }
        compileClasspath += sourceSets.main.runtimeClasspath
    }
    macos {
        java { srcDir "src" }
        resources { srcDir "resources" }
        compileClasspath += sourceSets.main.runtimeClasspath
    }
}

configurations {
    linuxCompile { extendsFrom compile }
    linux64Compile { extendsFrom compile }
    macosCompile { extendsFrom compile }
    windowsCompile { extendsFrom compile }
}

dependencies {

    //use of the available SWT jar but to only make the IDE validating the classes
    compileOnly fileTree(dir: 'libs', include: 'macos_swt.jar')

    //specific swt version according to the OS
    macosCompile fileTree(dir: 'libs', include: 'macos_swt.jar')
    linuxCompile fileTree(dir: 'libs', include: 'linux_swt.jar')
    linux64Compile fileTree(dir: 'libs', include: 'linux64_swt.jar')
    windowsCompile fileTree(dir: 'libs', include: 'windows_swt.jar')

    //indication de récupérer un fichier spécifique durant la phrase de compilation
    compile files('libs/sqlite-jdbc-3.21.0.jar')
    compile files('libs/SQLiteDatabaseModel-Core-1.0.jar')
    compile files('libs/SQLiteDatabaseModel-Jdbc-1.0.jar')
    compile 'org.checkerframework:checker:2.1.12'
}

def sources = [
        sourceSets.linux,
        sourceSets.linux64,
        sourceSets.macos,
        sourceSets.windows
]

def compiles = [
        configurations.linuxCompile,
        configurations.linux64Compile,
        configurations.macosCompile,
        configurations.windowsCompile
]

def args = [
        "",
        "",
        "-XstartOnFirstThread",
        ""
]

def names = ["Linux", "Linux64", "Macos", "Windows"]


if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    println "*** WINDOWS detected, implementing workarounds"

    sources = [
            sourceSets.windows
    ]

    compiles = [
            configurations.windowsCompile
    ]

    names = [ "Windows" ]
}

names.eachWithIndex { name, number ->

    task "execute${name}" (type:JavaExec) {
        System.out.println("having main" + mainClassName)

        if ( args[number] != "" ) jvmArgs args[number]
        main = mainClassName
        classpath = sources[number].runtimeClasspath
    }

    task "jar${name}" (type: Jar) {
        baseName = "${name}_${MAIN_TITLE}"
        version = MAIN_VERSION

        manifest {
            attributes 'Implementation-Title': MAIN_TITLE,
                    'Implementation-Version': MAIN_VERSION,
                    'Main-Class': mainClassName
        }

        from { compiles[number].collect { it.isDirectory() ? it : zipTree(it) } }
        from sources[number].output
    }
}